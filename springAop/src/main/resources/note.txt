AOP概念
1. 什么是AOP？
    AOP是面向切面编程，或者说是面向方面编程。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
    主要意图：将日志记录，性能统计，安全控制，事物处理，异常处理等代码从业务逻辑中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改
        变这些行为的时候不影响业务逻辑的代码。
    通俗描述：不通过修改源代码的方式，在主干功能上添加新的功能。
    使用登陆例子使用AOP。

2. 底层远离
    2.1 底层使用到了动态代理。
    (1) 有两种情况的动态代理
        第一种 有接口的情况，使用jdk中的动态代理
            创建接口的实现类动态代理，增强类的方法
        第二种 没有接口的情况，使用CGLIB动态代理
            创建子类的代理对象，增强类的方法

3. AOP（JDK实现动态代理）
    1. 使用JDK动态代理，使用proxy类里面的方法创建代理对象
        method：newProxyInstance(ClassLoader loader, 类<?>[] interfaces, InvocationHandler h)
        参数：1 类加载器。
             2 增强方法所在的类，这个类实现的接口，支持多个接口。
             3 实现这个接口，InvocationHandler，创建代理对象，写增强方法。
    2. 代码编写
        1 创建接口，定义方法
        2 创建接口实现类，实现方法
    3. 使用proxy类创建接口的代理对象

4. AOP相关术语（就好像是发动机的术语被叫做引擎）
    1. 连接点
        类中可以被增强的方法，这些可以被增强的方法就是连接点
    2. 切入点
        实际上被增强的方法
    3. 通知（增强）
        （1）实际增强的部分称为通知
        （2）通知有多种类型
            # 前置通知：方法之前执行
            # 后置通知：方法之后执行
                after:方法执行之后执行,最终通知，无论是否有异常都执行
                afterReturning:方法返回结果之后执行，也被叫做返回通知，如果有异常就不执行
            # 环绕通知：方法前后都执行
            # 异常通知：出现异常的时候执行
            # 最终通知：不管有没有异常都进行通知
    4. 切面
        （1）是一个动作，把通知应用到切入点的过程

5. AOP操作（准备）
    1. Spring框架一般都是基于AspectJ实现AOP操作
        （1）什么是AspectJ：不是Spring的组成部分，是独立的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
    2. 基于AspectJ实现AOP操作
        （1）基于xml配置文件实现
        （2）基于注解方式实现（使用的比较多）
    3. 在项目工程中引入AOP相关依赖
    4. 进行相应的配置，切入点（实际上进行增强的办法）表达式
        （1）切入点表达式的作用：知道对那个类的那个方法进行增强
        （2）语法结构：execution([权限修饰符号][返回类型][类全路径][方法名称][(参数列表)])
        * 举例子1：
            对com.atguigu.dao.BookDao类里面的add进行增强：execution(* com.atguigu.dao.BookDao.add(...))
        * 举例子2：
            对com.atguigu.dao.BookDao类里面的所有方法进行增强：execution(* com.atguigu.dao.BookDao.*(...))
        * 举例子3：
            对com.atguigu.dao下面的所有类的所有方法进行增强：execution(* com.atguigu.dao.*.*(...))

    5.AOP操作（AspectJ注解）
        1 创建类 ，在类里面定义方法
        2 新建类，写增强的逻辑
            -->在增强类里面，创建方法，让不同的方法代表不同的通知类型。
        3 进行通知的配置
            -->在spring配置文件中，开启注解扫描
            -->使用注解创建被增强的类和增强类的对象
            -->在增强类上增加注解@AspectJ
            -->在spring陪配置文件中开启生成代理对象
        4 配置不同类型的通知
            -->在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置
        5



